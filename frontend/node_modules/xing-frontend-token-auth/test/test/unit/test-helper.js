// Generated by CoffeeScript 1.10.0
var $auth, $authProvider, $cookieStore, $http, $httpBackend, $location, $locationProvider, $provider, $q, $rootScope, $timeout, $window, existingUserEmail, invalidEmail, setValidAuthQS, setValidEmailConfirmQS, setValidEmailConfirmQSForAdminUser, setValidPasswordConfirmQS, setValidPasswordConfirmQSForAdminUser, validAuthHeader, validClient, validEmail, validExpiry, validToken, validUid, validUser;

$locationProvider = null;

$authProvider = null;

$cookieStore = null;

$httpBackend = null;

$rootScope = null;

$location = null;

$provider = null;

$timeout = null;

$window = null;

$http = null;

$auth = null;

$q = null;

validToken = '123xyz';

validClient = 'abc123';

validUid = 123;

validExpiry = (new Date().getTime() / 1000) + 500 | 0;

validAuthHeader = {
  'access-token': validToken,
  'token-type': 'Bearer',
  client: validClient,
  expiry: validExpiry,
  uid: validUid
};

validEmail = 'test@test.com';

existingUserEmail = 'testExisting@test.com';

invalidEmail = 'gyahhh';

validUser = {
  id: 666,
  email: validEmail,
  uid: validUid
};

setup(function() {
  module('ng-token-auth', function(_$authProvider_, _$locationProvider_, $provide) {
    $authProvider = _$authProvider_;
    $locationProvider = _$locationProvider_;
    $authProvider.configure({
      validateOnPageLoad: false
    });
    return false;
  });

  inject(function($injector) {
    $httpBackend = $injector.get('$httpBackend');
    $cookieStore = $injector.get('$cookieStore');
    $rootScope = $injector.get('$rootScope');
    $location = $injector.get('$location');
    $timeout = $injector.get('$timeout');
    $window = $injector.get('$window');
    $http = $injector.get('$http');
    $auth = $injector.get('$auth');
    return $q = $injector.get('$q');
  });
  return sinon.spy($rootScope, '$broadcast');
});

teardown(function() {
  $httpBackend.verifyNoOutstandingExpectation();
  $httpBackend.verifyNoOutstandingRequest();
  return $auth.destroy();
});


/* helper methods */

setValidAuthQS = function() {
  $location.search('token', validToken);
  $location.search('client_id', validClient);
  return $location.search('uid', validUid);
};

setValidEmailConfirmQS = function() {
  setValidAuthQS();
  return $location.search('account_confirmation_success', true);
};

setValidEmailConfirmQSForAdminUser = function() {
  setValidEmailConfirmQS();
  return $location.search('config', 'admin');
};

setValidPasswordConfirmQS = function() {
  setValidAuthQS();
  return $location.search('reset_password', true);
};

setValidPasswordConfirmQSForAdminUser = function() {
  setValidPasswordConfirmQS();
  return $location.search('config', 'admin');
};
