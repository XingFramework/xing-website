// Generated by CoffeeScript 1.10.0
(function() {
  suite('email registration submission', function() {
    var dfd;
    dfd = null;
    suite('successful submission', function() {
      setup(function() {
        return $httpBackend.expectPOST('/api/auth').respond(201, {
          success: true
        });
      });
      suite('service module', function() {
        setup(function() {
          dfd = $auth.submitRegistration({
            email: validEmail,
            password: 'secret123',
            password_confirmation: 'secret123'
          });
          return $httpBackend.flush();
        });
        test('$rootScope should broadcast success event', function() {
          return assert($rootScope.$broadcast.calledWithMatch('auth:registration-email-success'));
        });
        return test('promise is resolved', function() {
          var resolved;
          resolved = false;
          dfd.then(function() {
            return resolved = true;
          });
          $timeout.flush();
          return assert(resolved);
        });
      });
      return suite('directive access', function() {
        var args;
        args = {
          email: validEmail,
          password: 'secret123',
          password_confirmation: 'secret123'
        };
        return test('$auth.submitRegistration should have been called', function() {
          sinon.spy($auth, 'submitRegistration');
          $rootScope.submitRegistration(args);
          return $httpBackend.flush();
        });
      });
    });
    return suite('failed submission', function() {
      suite('mismatched password', function() {
        var errorResp;
        errorResp = {
          success: false,
          errors: ['balls'],
          fieldErrors: {
            password_confirmation: ['padword midmadch']
          }
        };
        setup(function() {
          $httpBackend.expectPOST('/api/auth').respond(422, errorResp);
          dfd = $auth.submitRegistration({
            email: validEmail,
            password: 'secret123',
            password_confirmation: 'bogus'
          });
          return $httpBackend.flush();
        });
        test('$rootScope should broadcast failure event', function() {
          return assert($rootScope.$broadcast.calledWithMatch('auth:registration-email-error', errorResp));
        });
        return test('promise is rejected', function() {
          var caught;
          caught = false;
          dfd["catch"](function() {
            return caught = true;
          });
          $timeout.flush();
          return assert(caught);
        });
      });
      return suite('existing user', function() {
        var errorResp;
        errorResp = {
          success: false,
          errors: ['balls'],
          fieldErrors: {
            email: ['user exists']
          }
        };
        setup(function() {
          $httpBackend.expectPOST('/api/auth').respond(422, errorResp);
          dfd = $auth.submitRegistration({
            email: validEmail,
            password: 'secret123',
            password_confirmation: 'bogus'
          });
          return $httpBackend.flush();
        });
        test('$rootScope should broadcast failure event', function() {
          return assert($rootScope.$broadcast.calledWithMatch('auth:registration-email-error', errorResp));
        });
        return test('promise is rejected', function() {
          var caught;
          caught = false;
          dfd["catch"](function() {
            return caught = true;
          });
          $timeout.flush();
          return assert(caught);
        });
      });
    });
  });

}).call(this);
