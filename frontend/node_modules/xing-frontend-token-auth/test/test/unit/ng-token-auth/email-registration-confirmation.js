// Generated by CoffeeScript 1.10.0
(function() {
  suite('email registration confirmation', function() {
    var dfd;
    dfd = null;
    suite('successful registration', function() {
      setup(function() {
        $httpBackend.expectGET('/api/auth/validate_token').respond(201, {
          sucess: true,
          data: validUser
        });
        setValidEmailConfirmQS();
        dfd = $auth.validateUser();
        return $httpBackend.flush();
      });
      test('new user is defined in the root scope', function() {
        return assert.equal(validUser.uid, $rootScope.user.uid);
      });
      test('$rootScope broadcast validation success event', function() {
        return assert($rootScope.$broadcast.calledWith('auth:validation-success'));
      });
      test('$rootScope broadcast email confirmation success event', function() {
        return assert($rootScope.$broadcast.calledWith('auth:email-confirmation-success'));
      });
      return test('promise is resolved', function() {
        var resolved;
        resolved = false;
        dfd.then(function() {
          return resolved = true;
        });
        $timeout.flush();
        return assert(resolved);
      });
    });
    return suite('failed registration', function() {
      setup(function() {
        $httpBackend.expectGET('/api/auth/validate_token').respond(401, {
          sucess: false,
          errors: 'balls'
        });
        setValidEmailConfirmQS();
        dfd = $auth.validateUser();
        return $httpBackend.flush();
      });
      test('new user is not defined in the root scope', function() {
        return assert.equal(void 0, $rootScope.user.uid);
      });
      test('$rootScope broadcast validation error event', function() {
        return assert($rootScope.$broadcast.calledWith('auth:validation-error'));
      });
      test('$rootScope broadcast email confirmation error event', function() {
        return assert($rootScope.$broadcast.calledWith('auth:email-confirmation-error'));
      });
      return test('promise is rejected', function() {
        var caught;
        caught = false;
        dfd["catch"](function() {
          return caught = true;
        });
        $timeout.flush();
        return assert(caught);
      });
    });
  });

}).call(this);
