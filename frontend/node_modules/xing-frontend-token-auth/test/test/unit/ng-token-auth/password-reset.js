// Generated by CoffeeScript 1.10.0
(function() {
  suite('password update', function() {
    var dfd;
    dfd = null;
    suite('successful password update', function() {
      var successResp;
      successResp = {
        success: true
      };
      setup(function() {
        $httpBackend.expectPUT('/api/auth/password').respond(201, {
          success: true
        });
        dfd = $auth.updatePassword({
          password: 'secret123',
          password_confirmation: 'secret123'
        });
        return $httpBackend.flush();
      });
      test('success event should return user info', function() {
        return assert($rootScope.$broadcast.calledWithMatch('auth:password-change-success', successResp));
      });
      return test('promise is resolved', function() {
        var resolved;
        resolved = false;
        dfd.then(function() {
          return resolved = true;
        });
        $timeout.flush();
        return assert(resolved);
      });
    });
    suite('directive access', function() {
      var args;
      args = {
        password: 'secret123',
        password_confirmation: 'secret123'
      };
      return test('$auth.updatePassword was called from $rootScope', function() {
        $httpBackend.expectPUT('/api/auth/password').respond(201, {
          success: true
        });
        sinon.spy($auth, 'updatePassword');
        $rootScope.updatePassword(args);
        return $httpBackend.flush();
      });
    });
    return suite('failed password update', function() {
      var errorResp;
      errorResp = {
        success: false,
        error: ['sry']
      };
      setup(function() {
        $httpBackend.expectPUT('/api/auth/password').respond(401, errorResp);
        dfd = $auth.updatePassword({
          password: 'secret123',
          password_confirmation: 'secret123'
        });
        return $httpBackend.flush();
      });
      test('new user is NOT defined in the root scope', function() {
        return assert.equal(void 0, $rootScope.user.uid);
      });
      test('error should be broadcast by rootscope', function() {
        return assert($rootScope.$broadcast.calledWithMatch('auth:password-change-error', errorResp));
      });
      return test('promise is rejected', function() {
        var caught;
        caught = false;
        dfd["catch"](function() {
          return caught = true;
        });
        $timeout.flush();
        return assert(caught);
      });
    });
  });

}).call(this);
