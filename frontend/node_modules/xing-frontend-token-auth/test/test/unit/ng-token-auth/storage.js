// Generated by CoffeeScript 1.10.0
(function() {
  suite('alternate storage', function() {
    var newAuthHeader, successResp;
    newAuthHeader = {
      "access-token": "(^_^)",
      "token-type": 'Bearer',
      client: validClient,
      expiry: validExpiry.toString(),
      uid: validUid.toString()
    };
    successResp = {
      success: true,
      data: validUser
    };
    return suite('localStorage', function() {
      setup(function() {
        return $authProvider.configure({
          storage: 'localStorage'
        });
      });
      teardown(function() {
        return $authProvider.configure({
          storage: 'cookies'
        });
      });
      suite('token validation', function() {
        setup(function() {
          $httpBackend.expectGET('/api/auth/validate_token').respond(201, successResp, newAuthHeader);
          $window.localStorage.setItem('auth_headers', JSON.stringify(validAuthHeader));
          $auth.validateUser();
          return $httpBackend.flush();
        });
        test('headers should be updated', function() {
          return assert.deepEqual(newAuthHeader, $auth.retrieveData('auth_headers'));
        });
        return test('header is included with the next request to the api', function() {
          $httpBackend.expectGET('/api/test', function(headers) {
            assert.equal(newAuthHeader['access-token'], headers['access-token']);
            return headers;
          }).respond(201, successResp, {
            'access-token': 'access-token',
            'whatever': 'whatever'
          });
          $http.get('/api/test');
          return $httpBackend.flush();
        });
      });
      return suite('sign out', function() {
        setup(function() {
          $httpBackend.expectDELETE('/api/auth/sign_out').respond(201, successResp);
          $window.localStorage.setItem('auth_headers', JSON.stringify(validAuthHeader));
          $auth.signOut();
          return $httpBackend.flush();
        });
        test('$rootScope should broadcast logout success event', function() {
          return assert($rootScope.$broadcast.calledWith('auth:logout-success'));
        });
        return test('localStorage item should no longer be present', function() {
          return assert($cookieStore.get('auth_headers') === void 0);
        });
      });
    });
  });

}).call(this);
