// Generated by CoffeeScript 1.10.0
(function() {
  suite('sign out', function() {
    var dfd, errorResp, successResp;
    dfd = null;
    successResp = {
      success: true
    };
    errorResp = {
      success: false,
      errors: ['fregg.jpg']
    };
    suite('successful request', function() {
      setup(function() {
        $httpBackend.expectDELETE('/api/auth/sign_out').respond(201, successResp);
        $cookieStore.put('auth_headers', validAuthHeader);
        dfd = $auth.signOut();
        return $httpBackend.flush();
      });
      test('$rootScope should broadcast success event', function() {
        return assert($rootScope.$broadcast.calledWith('auth:logout-success'));
      });
      test('cookie should no longer be present', function() {
        return assert($cookieStore.get('auth_headers') === void 0);
      });
      return test('promise is resolved', function() {
        var resolved;
        resolved = false;
        dfd.then(function() {
          return resolved = true;
        });
        $timeout.flush();
        return assert(resolved);
      });
    });
    suite('directive access', function() {
      return test('$auth.signOut was called from $rootScope', function() {
        $httpBackend.expectDELETE('/api/auth/sign_out').respond(201, successResp);
        sinon.spy($auth, 'signOut');
        $rootScope.signOut();
        return $httpBackend.flush();
      });
    });
    return suite('failed request', function() {
      setup(function() {
        $httpBackend.expectDELETE('/api/auth/sign_out').respond(401, errorResp);
        $cookieStore.put('auth_headers', validAuthHeader);
        dfd = $auth.signOut();
        return $httpBackend.flush();
      });
      test('$rootScope should broadcast error event', function() {
        return assert($rootScope.$broadcast.calledWith('auth:logout-error'));
      });
      test('cookie should no longer be present', function() {
        return assert($cookieStore.get('auth_headers') === void 0);
      });
      return test('promise is rejected', function() {
        var caught;
        caught = false;
        dfd["catch"](function() {
          return caught = true;
        });
        $timeout.flush();
        return assert(caught);
      });
    });
  });

}).call(this);
