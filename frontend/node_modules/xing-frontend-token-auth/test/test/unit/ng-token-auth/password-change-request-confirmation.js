// Generated by CoffeeScript 1.10.0
(function() {
  suite('password change confirmation', function() {
    var dfd;
    dfd = null;
    suite('successful authentication', function() {
      var successResp;
      successResp = {
        sucess: true,
        data: validUser
      };
      setup(function() {
        $httpBackend.expectGET('/api/auth/validate_token').respond(201, successResp);
        setValidPasswordConfirmQS();
        dfd = $auth.validateUser();
        return $httpBackend.flush();
      });
      test('that new user is defined in the root scope', function() {
        return assert.equal(validUser.uid, $rootScope.user.uid);
      });
      test('that $rootScope broadcast validation success event', function() {
        return assert($rootScope.$broadcast.calledWithMatch('auth:password-reset-confirm-success', validUser));
      });
      test('that $rootScope broadcast email confirmation success event', function() {
        return assert($rootScope.$broadcast.calledWithMatch('auth:validation-success', validUser));
      });
      return test('promise is resolved', function() {
        var resolved;
        resolved = false;
        dfd.then(function() {
          return resolved = true;
        });
        $timeout.flush();
        return assert(resolved);
      });
    });
    return suite('failed authentication', function() {
      var errorResp;
      errorResp = {
        sucess: false,
        errors: ['xxx']
      };
      setup(function() {
        $httpBackend.expectGET('/api/auth/validate_token').respond(401, errorResp);
        setValidPasswordConfirmQS();
        dfd = $auth.validateUser();
        return $httpBackend.flush();
      });
      test('that new user is not defined in the root scope', function() {
        return assert.equal(void 0, $rootScope.user.uid);
      });
      test('that $rootScope broadcast password reset request error event', function() {
        return assert($rootScope.$broadcast.calledWithMatch('auth:password-reset-confirm-error', errorResp));
      });
      test('that $rootScope broadcast validation error event', function() {
        return assert($rootScope.$broadcast.calledWithMatch('auth:validation-error', errorResp));
      });
      return test('promise is rejected', function() {
        var caught;
        caught = false;
        dfd["catch"](function() {
          return caught = true;
        });
        $timeout.flush();
        return assert(caught);
      });
    });
  });

}).call(this);
