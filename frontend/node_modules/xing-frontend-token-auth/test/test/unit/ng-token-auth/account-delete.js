// Generated by CoffeeScript 1.10.0
(function() {
  suite('account delete', function() {
    var dfd;
    dfd = null;
    setup(function() {
      angular.extend($rootScope.user, validUser);
      return $cookieStore.put('auth_headers', validAuthHeader);
    });
    suite('successful deletion', function() {
      var successResp;
      successResp = {
        success: true
      };
      setup(function() {
        $httpBackend.expectDELETE('/api/auth').respond(201, successResp);
        dfd = $auth.destroyAccount();
        return $httpBackend.flush();
      });
      test('account delete event is broadcast by $rootScope', function() {
        return assert($rootScope.$broadcast.calledWithMatch('auth:account-destroy-success', successResp));
      });
      test('user object is destroyed', function() {
        return assert.deepEqual($rootScope.user, {});
      });
      test('local auth headers are destroyed', function() {
        return assert.isUndefined($auth.retrieveData('auth_headers'));
      });
      return test('promise is resolved', function() {
        var resolved;
        resolved = false;
        dfd.then(function() {
          return resolved = true;
        });
        $timeout.flush();
        return assert(resolved);
      });
    });
    return suite('failed update', function() {
      var failedResp;
      failedResp = {
        success: false,
        errors: ['◃┆◉◡◉┆▷']
      };
      setup(function() {
        $httpBackend.expectDELETE('/api/auth').respond(403, failedResp);
        dfd = $auth.destroyAccount();
        return $httpBackend.flush();
      });
      test('failed account delete event is broadcast by $rootScope', function() {
        return assert($rootScope.$broadcast.calledWithMatch('auth:account-destroy-error', failedResp));
      });
      test('user is still defined on root scope', function() {
        return assert.deepEqual($rootScope.user, validUser);
      });
      test('auth headers persist', function() {
        return assert.deepEqual($auth.retrieveData('auth_headers'), validAuthHeader);
      });
      return test('promise is rejected', function() {
        var caught;
        caught = false;
        dfd["catch"](function() {
          return caught = true;
        });
        $timeout.flush();
        return assert(caught);
      });
    });
  });

}).call(this);
