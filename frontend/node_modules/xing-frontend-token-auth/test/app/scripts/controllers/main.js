// Generated by CoffeeScript 1.10.0
(function() {
  angular.module('ngTokenAuthTestApp').controller('MainCtrl', function($rootScope, $scope, $location, $state, $stateParams, usSpinnerService, $timeout, $auth, $modal, $http, $q) {
    var $body, passwordChangeErrorModal, passwordChangeErrorScope, passwordChangeModal, passwordChangeSuccessModal;
    $body = $('body');
    $scope.accessRestrictedRoute = function() {
      return $http.get($auth.apiUrl() + '/demo/members_only').success(function(resp) {
        return alert(resp.data.message);
      }).error(function(resp) {
        return alert(resp.errors[0]);
      });
    };
    $scope.restrictedRoutesBatch = function() {
      return $q.all([$http.get($auth.apiUrl() + '/demo/members_only'), $http.get($auth.apiUrl() + '/demo/members_only')]).then(function(resp) {
        return alert('Multiple requests to default user routes succeeded');
      })["catch"](function(resp) {
        return alert('Multiple requests to default user routes failed');
      });
    };
    $scope.accessRestrictedRouteEvilUser = function() {
      return $http.get($auth.apiUrl() + '/demo/members_only_mang').success(function(resp) {
        return alert(resp.data.message);
      }).error(function(resp) {
        return alert(resp.errors[0]);
      });
    };
    $scope.restrictedRoutesBatchEvilUser = function() {
      return $q.all([$http.get($auth.apiUrl() + '/demo/members_only_mang'), $http.get($auth.apiUrl() + '/demo/members_only_mang')]).then(function(resp) {
        return alert('Multiple requests to evil user routes succeeded');
      })["catch"](function(resp) {
        return alert('Multiple requests to evil user routes failed');
      });
    };
    $scope.accessRestrictedRouteMember = function() {
      return $http.get($auth.apiUrl() + '/demo/members_only_group').success(function(resp) {
        return alert(resp.data.message);
      }).error(function(resp) {
        return alert(resp.errors[0]);
      });
    };
    $scope.restrictedRoutesBatchMember = function() {
      return $q.all([$http.get($auth.apiUrl() + '/demo/members_only_group'), $http.get($auth.apiUrl() + '/demo/members_only_group')]).then(function(resp) {
        return alert('Multiple requests to member user routes succeeded');
      })["catch"](function(resp) {
        return alert('Multiple requests to member user routes failed');
      });
    };
    $rootScope.$on('$stateChangeStart', function(event, toState, toParams, fromState, fromParams) {
      ga('send', 'pageview', {
        'page': $location.path()
      });
      $body.attr('class', toState.name.replace(/\./g, ' ') + ' loading');
      usSpinnerService.spin('main-loading');
      return $scope.collapse = false;
    });
    $rootScope.$on('$viewContentLoaded', function(event, viewConfig) {
      return $timeout((function() {
        usSpinnerService.stop('main-loading');
        return $body.removeClass('loading');
      }), 0);
    });
    $rootScope.refresh = function() {
      return $state.transitionTo($state.current, $stateParams, {
        reload: true,
        inherit: false,
        notify: true
      });
    };
    $scope.$on('auth:registration-email-success', function(ev, data) {
      var field, ref, results, val;
      $modal({
        title: "Success",
        html: true,
        content: "<div id='alert-registration-email-sent'>A registration email was " + "sent to " + data.email + ". follow the instructions contained in the " + "email to complete registration.</div>"
      });
      ref = $scope.registrationForm;
      results = [];
      for (field in ref) {
        val = ref[field];
        results.push(delete $scope.registrationForm[field]);
      }
      return results;
    });
    $scope.$on('auth:registration-email-error', function(ev, data) {
      var errors;
      errors = _(data.errors).map(function(v, k) {
        return k + ": " + v + ".";
      }).value().join("<br/>");
      return $modal({
        title: "Error",
        html: true,
        content: "<div id='alert-registration-email-failed'>Unable to send email " + "registration. " + errors + "</div>"
      });
    });
    $scope.$on('auth:email-confirmation-success', function(ev, data) {
      return $modal({
        title: "Success!",
        html: true,
        content: "<div id='alert-email-confirmation-success'>Welcome " + data.email + ". Your account has been successfully created." + "</div>"
      });
    });
    $scope.$on('auth:email-confirmation-error', function(ev, data) {
      return $modal({
        title: "Error!",
        html: true,
        content: "<div id='alert-email-confirmation-error'>Unable to confirm " + "your account. Request a password reset to verify your identity." + "</div>"
      });
    });
    $scope.$on('auth:password-reset-request-success', function(ev, params) {
      return $modal({
        title: "Success",
        html: true,
        content: "<div id='alert-password-reset-request-success'>Password reset " + "instructions have been sent to " + params.email + "</div>"
      });
    });
    $scope.$on('auth:password-reset-request-error', function(ev, data) {
      return $modal({
        title: "Error",
        html: true,
        content: "<div id='alert-password-reset-request-error'>Error: " + _.map(data.errors).toString() + "</div>"
      });
    });
    $scope.$on('auth:password-reset-confirm-error', function(ev, data) {
      return $modal({
        title: "Error",
        html: true,
        content: "<div id='alert-password-reset-request-error'>Error: " + _.map(data.errors).toString() + "</div>"
      });
    });
    passwordChangeModal = $modal({
      title: "Change your password!",
      html: true,
      show: false,
      contentTemplate: 'partials/password-reset-modal.html'
    });
    passwordChangeSuccessModal = $modal({
      title: "Success",
      html: true,
      show: false,
      content: "<div id='alert-password-change-success'>Your password " + "has been successfully updated."
    });
    passwordChangeErrorScope = $scope.$new();
    passwordChangeErrorModal = $modal({
      title: "Error",
      html: true,
      show: false,
      scope: passwordChangeErrorScope,
      contentTemplate: 'partials/password-change-error-modal.html'
    });
    $scope.showPasswordChangeModal = function() {
      return passwordChangeModal.show();
    };
    $scope.$on('auth:password-reset-confirm-success', function() {
      return passwordChangeModal.show();
    });
    $scope.$on('auth:password-change-success', function() {
      passwordChangeModal.hide();
      return passwordChangeSuccessModal.show();
    });
    $scope.$on('auth:password-change-error', function(ev, data) {
      passwordChangeErrorScope.errors = data.errors;
      passwordChangeModal.hide();
      return passwordChangeErrorModal.show();
    });
    passwordChangeErrorScope.$on('modal.hide', function() {
      return passwordChangeModal.show();
    });
    $scope.$on('auth:login-success', function(ev, user) {
      var field, ref, ref1, results, val;
      $modal({
        title: "Success",
        html: true,
        content: "<div id='alert-auth-login-success'>Welcome back " + user.email + '</div>'
      });
      ref = $scope.loginForm;
      for (field in ref) {
        val = ref[field];
        delete $scope.loginForm[field];
      }
      ref1 = $scope.registrationForm;
      results = [];
      for (field in ref1) {
        val = ref1[field];
        results.push(delete $scope.registrationForm[field]);
      }
      return results;
    });
    $scope.$on('auth:login-error', function(ev, data) {
      return $modal({
        title: "Error",
        html: true,
        content: "<div id='alert-login-error'>Authentication failure: " + data.errors[0] + '</div>'
      });
    });
    $scope.$on('auth:logout-success', function(ev) {
      return $modal({
        title: 'Success',
        html: true,
        content: "<div id='alert-logout-success'>Goodbye</div>"
      });
    });
    $scope.$on('auth:logout-error', function(ev) {
      return $modal({
        title: 'Error',
        html: true,
        content: "<div id='alert-logout-error'>Unable to complete logout. " + "Please try again.</div>"
      });
    });
    $scope.$on('auth:account-update-success', function() {
      return $modal({
        title: 'Success',
        html: true,
        content: "<div id='alert-account-update-success'>Your account has been updated." + "</div>"
      });
    });
    $scope.$on('auth:account-update-error', function(ev, data) {
      var errors;
      errors = _(data.errors).map(function(v, k) {
        return k + ": " + v + ".";
      }).value().join("<br/>");
      return $modal({
        title: "Error",
        html: true,
        content: "<div id='alert-account-update-error'>Unable to update " + "your account. " + errors + "</div>"
      });
    });
    $scope.$on('auth:account-destroy-success', function() {
      return $modal({
        title: 'Success',
        html: true,
        content: "<div id='alert-account-destroy-success'>Your account has been destroyed." + "</div>"
      });
    });
    return $scope.$on('auth:account-destroy-error', function(ev, data) {
      var errors;
      errors = _(data.errors).map(function(v, k) {
        return k + ": " + v + ".";
      }).value().join("<br/>");
      return $modal({
        title: "Error",
        html: true,
        content: "<div id='alert-account-destroy-error'>Unable to destroy " + "your account. " + errors + "</div>"
      });
    });
  });

}).call(this);
